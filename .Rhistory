{. - V(.)[degree(.) == 0]} %>%
{
simscore <- similarity(., mode = 'out')[V(.)$name == person_of_interest];
V(.)$simscore <- simscore;
.
}
p2
as_data_frame(p2, 'vertices') %>% arrange(desc(simscore)) %>% head
as_data_frame(p2, 'vertices') %>% arrange(desc(simscore)) %>% head(20)
#Who are similar people?
p2 <- g %>%
#use leftovers as test set
{. - head_of(., E(.))[!name %in% p1_top]} %>%
{. - V(.)[degree(.) == 0]} %>%
{
#how similar are nodes to our person of interest?
simscore <- similarity(., mode = 'out')[V(.)$name == person_of_interest];
V(.)$simscore <- simscore;
.;
} %>%
#remove person of interest
{. - V(.)[name == person_of_interest]} %>%
#remove movies the person of interest already saw
{. - V(.)[name %in% p1_top]}
p2
#Who are similar people?
p2 <- g %>%
# {. - head_of(., E(.))[!name %in% p1_movies]} %>%
# {. - V(.)[degree(.) == 0]} %>%
{
#how similar are nodes to our person of interest?
simscore <- similarity(., mode = 'out')[V(.)$name == person_of_interest];
V(.)$simscore <- simscore;
.;
} %>%
#remove person of interest
{. - V(.)[name == person_of_interest]} %>%
#remove movies the person of interest already saw
{. - V(.)[name %in% p1_movies]} %>%
#remove people who are not similar to person of interest
{
raters <- tail_of(., E(.))
q3 <- quantile(raters$simscore, .9)
print(q3)
allnames <- ego(. , nodes = V(.)[simscore > q3]) %>%
unlist %>%
names %>%
unique
. - V(.)[!name %in% allnames]
} %>%
{
rate_score <- strength(., weights = E(.)$rating)/degree(.);
V(.)$rate_score <- rate_score;
V(.)$degree <- degree(.)
. - tail_of(., E(.));
}
#Who are similar people?
p2 <- g %>%
# {. - head_of(., E(.))[!name %in% p1_movies]} %>%
# {. - V(.)[degree(.) == 0]} %>%
{
#how similar are nodes to our person of interest?
simscore <- similarity(., mode = 'out')[V(.)$name == person_of_interest];
V(.)$simscore <- simscore;
.;
} %>%
#remove person of interest
{. - V(.)[name == person_of_interest]} %>%
#remove movies the person of interest already saw
{. - V(.)[name %in% p1_movies]} %>%
#remove people who are not similar to person of interest
{
raters <- tail_of(., E(.))
q3 <- quantile(raters$simscore, .95)
print(q3)
allnames <- ego(. , nodes = V(.)[simscore > q3]) %>%
unlist %>%
names %>%
unique
. - V(.)[!name %in% allnames]
} %>%
{
rate_score <- strength(., weights = E(.)$rating)/degree(.);
V(.)$rate_score <- rate_score;
V(.)$degree <- degree(.)
. - tail_of(., E(.));
}
#Who are similar people?
p2 <- g %>%
# {. - head_of(., E(.))[!name %in% p1_movies]} %>%
# {. - V(.)[degree(.) == 0]} %>%
{
#how similar are nodes to our person of interest?
simscore <- similarity(., mode = 'out')[V(.)$name == person_of_interest];
V(.)$simscore <- simscore;
.;
} %>%
#remove person of interest
{. - V(.)[name == person_of_interest]} %>%
#remove movies the person of interest already saw
{. - V(.)[name %in% p1_movies]} %>%
#remove people who are not similar to person of interest
{
raters <- tail_of(., E(.))
# q3 <- quantile(raters$simscore, .95)
# print(q3)
# allnames <- ego(. , nodes = V(.)[simscore > q3]) %>%
#   unlist %>%
#   names %>%
#   unique
#
# . - V(.)[!name %in% allnames]
}
p2
p2 %>% unique
#Who are similar people?
p2 <- g %>%
# {. - head_of(., E(.))[!name %in% p1_movies]} %>%
# {. - V(.)[degree(.) == 0]} %>%
{
#how similar are nodes to our person of interest?
simscore <- similarity(., mode = 'out')[V(.)$name == person_of_interest];
V(.)$simscore <- simscore;
.;
} %>%
#remove person of interest
{. - V(.)[name == person_of_interest]} %>%
#remove movies the person of interest already saw
{. - V(.)[name %in% p1_movies]} %>%
#remove people who are not similar to person of interest
{
raters <- tail_of(., E(.)) %>% unique
q3 <- quantile(raters$simscore, .95)
print(q3)
allnames <- ego(. , nodes = V(.)[simscore > q3]) %>%
unlist %>%
names %>%
unique
. - V(.)[!name %in% allnames]
}
#Who are similar people?
p2 <- g %>%
# {. - head_of(., E(.))[!name %in% p1_movies]} %>%
# {. - V(.)[degree(.) == 0]} %>%
{
#how similar are nodes to our person of interest?
simscore <- similarity(., mode = 'out')[V(.)$name == person_of_interest];
V(.)$simscore <- simscore;
.;
} %>%
#remove person of interest
{. - V(.)[name == person_of_interest]} %>%
#remove movies the person of interest already saw
{. - V(.)[name %in% p1_movies]} %>%
#remove people who are not similar to person of interest
{
raters <- tail_of(., E(.)) %>% unique
q3 <- quantile(raters$simscore, .95)
print(q3)
allnames <- ego(. , nodes = V(.)[simscore > q3]) %>%
unlist %>%
names %>%
unique
. - V(.)[!name %in% allnames]
}
p2
#Who are similar people?
p2 <- g %>%
# {. - head_of(., E(.))[!name %in% p1_movies]} %>%
# {. - V(.)[degree(.) == 0]} %>%
{
#how similar are nodes to our person of interest?
simscore <- similarity(., mode = 'out')[V(.)$name == person_of_interest];
V(.)$simscore <- simscore;
.;
} %>%
#remove person of interest
{. - V(.)[name == person_of_interest]} %>%
#remove movies the person of interest already saw
{. - V(.)[name %in% p1_movies]} %>%
#remove people who are not similar to person of interest
{
raters <- tail_of(., E(.)) %>% unique
# q3 <- quantile(raters$simscore, .95)
# print(q3)
# allnames <- ego(. , nodes = V(.)[simscore > q3]) %>%
#   unlist %>%
#   names %>%
#   unique
#
# . - V(.)[!name %in% allnames]
}
p2
p2$simscore
p2$simscore %>% sort()
#Who are similar people?
p2 <- g %>%
# {. - head_of(., E(.))[!name %in% p1_movies]} %>%
# {. - V(.)[degree(.) == 0]} %>%
{
#how similar are nodes to our person of interest?
simscore <- similarity(., mode = 'out')[V(.)$name == person_of_interest];
V(.)$simscore <- simscore;
.;
}
p2$simscore %>% sort()
p2
V(p2)$simscore %>% unique %>% {sort(desc(.))}
#Who are similar people?
p2 <- g %>%
# {. - head_of(., E(.))[!name %in% p1_movies]} %>%
# {. - V(.)[degree(.) == 0]} %>%
{
#how similar are nodes to our person of interest?
simscore <- similarity(. )[V(.)$name == person_of_interest];
V(.)$simscore <- simscore;
.;
}
p2
p2 %>% as_data_frame() %>% arrange(desc(simscore)) %>% head
p2 %>% as_data_frame('vertices') %>% arrange(desc(simscore)) %>% head
p2 %>% as_data_frame('vertices') %>% arrange(desc(simscore)) %>% head(10)
p2 %>%
{
V(.)$type <- V(.)$name %in% (head_of(., E(.))$name %>% unique)
}
p2 %>%
{
V(.)$type <- V(.)$name %in% (head_of(., E(.))$name %>% unique);
.
}
p2 %>%
{
V(.)$type <- V(.)$name %in% (head_of(., E(.))$name %>% unique);
.$type
}
p2 %>%
{
V(.)$type <- V(.)$name %in% (head_of(., E(.))$name %>% unique);
V(.)$type
}
p2 %>%
{
V(.)$type <- V(.)$name %in% (head_of(., E(.))$name %>% unique);
V(.)$type
} %>%
bipartite_projection()
p2 %>%
{
V(.)$type <- V(.)$name %in% (head_of(., E(.))$name %>% unique);
.
} %>%
bipartite_projection()
?bipartite_projection
p2_projection <- p2 %>%
{
V(.)$type <- V(.)$name %in% (head_of(., E(.))$name %>% unique);
.
} %>%
bipartite_projection()
p2_projection
p2_projection <- p2 %>%
{
V(.)$type <- V(.)$name %in% (head_of(., E(.))$name %>% unique);
.
} %>%
bipartite_projection(which = 'false')
p2_projection
ego(p2_projection)
ego(p2_projection, nodes = person_of_interest)
E(p2_projection)[person_of_interest %--% V(p2_projection)]
p2_projection %>%
{. - E(.)[person_of_interest %--% V(.)]} %>%
as_data_frame() %>% arrange(desc(weight)) %>% head
p2 %>% as_data_frame('vertices') %>% arrange(desc(simscore)) %>% head(10)
p2_projection %>%
{. - E(.)[!person_of_interest %--% V(.)]} %>%
as_data_frame() %>% arrange(desc(weight)) %>% head
p2
p2 %>% as_data_frame('vertices') %>% arrange(desc(simscore)) %>% head(10)
#Who are similar people?
p2 <- g %>%
{
#how similar are nodes to our person of interest?
simscore <- similarity(. , mode = 'out')[V(.)$name == person_of_interest];
V(.)$simscore <- simscore;
.;
}
p2 %>% as_data_frame('vertices') %>% arrange(desc(simscore)) %>% head(10)
#Who are similar people?
p2 <- g %>%
{
#how similar are nodes to our person of interest?
simscore <- similarity(., unique(tail_of(., E(.))$name), mode = 'out')[V(.)$name == person_of_interest];
V(.)$simscore <- simscore;
.;
}
#Who are similar people?
p2 <- g %>%
{
#how similar are nodes to our person of interest?
simscore <- similarity(., vids = unique(tail_of(., E(.))$name), mode = 'out')[V(.)$name == person_of_interest];
V(.)$simscore <- simscore;
.;
}
#Who are similar people?
p2 <- g %>%
{
#how similar are nodes to our person of interest?
simscore <- similarity(., unique(tail_of(., E(.)$name)), mode = 'out')[V(.)$name == person_of_interest];
# V(.)$simscore <- simscore;
# .;
}
#Who are similar people?
p2 <- g %>%
{
#how similar are nodes to our person of interest?
simscore <- similarity(., unique(tail_of(., E(.))$name), mode = 'out')[V(.)$name == person_of_interest];
# V(.)$simscore <- simscore;
# .;
}
p2
p2 %>% sort
#Who are similar people?
p2 <- g %>%
{
#how similar are nodes to our person of interest?
simscore <- similarity(., mode = 'out')[V(.)$name == person_of_interest];
V(.)$simscore <- simscore;
.;
}
p2
p2 %>% as_data_frame('vertices') %>% arrange(desc(simscore)) %>% head(100)
#Who are similar people?
p2 <- g %>%
{
#how similar are nodes to our person of interest?
simscore <- similarity(., mode = 'out')[V(.)$name == person_of_interest];
V(.)$simscore <- simscore;
.;
} %>%
#remove person of interest
{. - V(.)[name == person_of_interest]} %>%
#remove movies the person of interest already saw
{. - V(.)[name %in% p1_movies]} %>%
#remove people who are not similar to person of interest
{
raters <- tail_of(., E(.)) %>% unique
q3 <- quantile(raters$simscore, .95)
allnames <- ego(. , nodes = V(.)[simscore > q3]) %>%
unlist %>%
names %>%
unique
. - V(.)[!name %in% allnames]
}
p2
tail_of(p2, E(p2)) %>% unique
movies
#Who are similar people?
p2 <- g %>%
{
#how similar are nodes to our person of interest?
simscore <- similarity(., mode = 'out')[V(.)$name == person_of_interest];
V(.)$simscore <- simscore;
.;
} %>%
#remove person of interest
{. - V(.)[name == person_of_interest]} %>%
#remove movies the person of interest already saw
{. - V(.)[name %in% p1_movies]} %>%
#remove people who are not similar to person of interest
{
raters <- tail_of(., E(.)) %>% unique
q3 <- quantile(raters$simscore, .95)
allnames <- ego(. , nodes = V(.)[simscore > q3]) %>%
unlist %>%
names %>%
unique
. - V(.)[!name %in% allnames]
} %>%
#Within this group, how s
{
#total rating / total connections
rate_score <- strength(., weights = E(.)$rating)/degree(.);
V(.)$rate_score <- rate_score;
V(.)$degree <- degree(.)
. - tail_of(., E(.));
}
p2
p2 %>% as_data_frame('vertices')
p2 %>% as_data_frame('vertices') %>% arrange(desc(degree, rate_score)) %>% head(10)
p2 %>% as_data_frame('vertices') %>% arrange(desc(degree), desc(rate_score)) %>% head(10)
p2 %>% as_data_frame('vertices') %>% filter(degree > 5) %>% arrange(desc(rate_score)) %>% head(10)
recommend_movies <- function(g, person_of_interest){
person_of_interest <- '1'
p1 <- g %>%
ego(nodes = person_of_interest) %>%
.[[1]] %>%
{g - V(g)[!name %in% .$name]}
#all movies person of interest likes
p1_movies <- head_of(p1, E(p1))
#let's get top movies
p1_top <- p1 %>%
{
q3 <- quantile(E(.)$rating, .75);
. - E(.)[rating < q3]
} %>%
head_of(E(.)) %>%
.$name
#Who are similar people?
p2 <- g %>%
{
#how similar are nodes to our person of interest?
simscore <- similarity(., mode = 'out')[V(.)$name == person_of_interest];
V(.)$simscore <- simscore;
.;
} %>%
#remove person of interest
{. - V(.)[name == person_of_interest]} %>%
#remove movies the person of interest already saw
{. - V(.)[name %in% p1_movies]} %>%
#remove people who are not similar to person of interest
{
raters <- tail_of(., E(.)) %>% unique
q3 <- quantile(raters$simscore, .95)
allnames <- ego(. , nodes = V(.)[simscore > q3]) %>%
unlist %>%
names %>%
unique
. - V(.)[!name %in% allnames]
} %>%
#Within this group, how s
{
#total rating / total connections
rate_score <- strength(., weights = E(.)$rating)/degree(.);
V(.)$rate_score <- rate_score;
V(.)$degree <- degree(.)
. - tail_of(., E(.));
}
p2 %>%
as_data_frame('vertices') %>%
filter(degree > 5) %>%
arrange(desc(rate_score))
}
rm(list = ls())
movies <- read_csv('ml-latest-small/movies.csv')
ratings <- read_csv('ml-latest-small/ratings.csv')
#people -[like]-> movies
g <- ratings %>%
left_join(movies) %>%
select(userId, title, rating) %>%
graph_from_data_frame()
recommend_movies <- function(g, person_of_interest){
person_of_interest <- '1'
p1 <- g %>%
ego(nodes = person_of_interest) %>%
.[[1]] %>%
{g - V(g)[!name %in% .$name]}
#all movies person of interest likes
p1_movies <- head_of(p1, E(p1))
#let's get top movies
p1_top <- p1 %>%
{
q3 <- quantile(E(.)$rating, .75);
. - E(.)[rating < q3]
} %>%
head_of(E(.)) %>%
.$name
#Who are similar people?
p2 <- g %>%
{
#how similar are nodes to our person of interest?
simscore <- similarity(., mode = 'out')[V(.)$name == person_of_interest];
V(.)$simscore <- simscore;
.;
} %>%
#remove person of interest
{. - V(.)[name == person_of_interest]} %>%
#remove movies the person of interest already saw
{. - V(.)[name %in% p1_movies]} %>%
#remove people who are not similar to person of interest
{
raters <- tail_of(., E(.)) %>% unique
q3 <- quantile(raters$simscore, .95)
allnames <- ego(. , nodes = V(.)[simscore > q3]) %>%
unlist %>%
names %>%
unique
. - V(.)[!name %in% allnames]
} %>%
#Within this group, how s
{
#total rating / total connections
rate_score <- strength(., weights = E(.)$rating)/degree(.);
V(.)$rate_score <- rate_score;
V(.)$degree <- degree(.)
. - tail_of(., E(.));
}
p2 %>%
as_data_frame('vertices') %>%
filter(degree > 5) %>%
arrange(desc(rate_score))
}
temp <-recommend_movies(g, '1')
temp
temp %>% head()
p1 <- g %>%
ego(nodes = person_of_interest) %>%
.[[1]] %>%
{g - V(g)[!name %in% .$name]}
#all movies person of interest likes
p1_movies <- head_of(p1, E(p1))
